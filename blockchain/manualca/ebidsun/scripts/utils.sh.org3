#!/bin/bash

set -e


setGlobals() {
  PEER=$1
  ORG=$2
  if [ $ORG -eq 1 ]; then
    CORE_PEER_LOCALMSPID="BidsunMSP"
    CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG1_CA
    CORE_PEER_MSPCONFIGPATH=/opt/workspace/crypto/peerOrganizations/bidsun.com/users/Admin@bidsun.com/msp
    if [ $PEER -eq 0 ]; then
      CORE_PEER_ADDRESS=peer0.bidsun.com:7051
    else
      CORE_PEER_ADDRESS=peer1.bidsun.com:8051
    fi
  elif [ $ORG -eq 2 ]; then
    CORE_PEER_LOCALMSPID="GuangzhouMSP"
    CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG2_CA
    CORE_PEER_MSPCONFIGPATH=/opt/workspace/crypto/peerOrganizations/guangzhou.com/users/Admin@guangzhou.com/msp
    if [ $PEER -eq 0 ]; then
      CORE_PEER_ADDRESS=peer0.guangzhou.com:9051
    else
      CORE_PEER_ADDRESS=peer1.guangzhou.com:10051
    fi

  elif [ $ORG -eq 3 ]; then
    CORE_PEER_LOCALMSPID="ZhuhaiMSP"
    CORE_PEER_TLS_ROOTCERT_FILE=$PEER0_ORG3_CA
    CORE_PEER_MSPCONFIGPATH=/opt/workspace/crypto/peerOrganizations/zhuhai.com/users/Admin@zhuhai.com/msp
    if [ $PEER -eq 0 ]; then
      CORE_PEER_ADDRESS=peer0.zhuhai.com:11051
    else
      CORE_PEER_ADDRESS=peer1.zhuhai.com:12051
    fi
  else
    echo "================== ERROR !!! ORG Unknown =================="
  fi

  if [ "$VERBOSE" == "true" ]; then
    env | grep CORE
  fi
}



# Set OrdererOrg.Admin globals
setOrdererGlobals() {
  CORE_PEER_LOCALMSPID="OrdererMSP"
  CORE_PEER_TLS_ROOTCERT_FILE=/opt/workspace/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
  CORE_PEER_MSPCONFIGPATH=/opt/workspace/crypto/ordererOrganizations/example.com/users/Admin@example.com/msp
}


# config.json
# 输入: $ORDERER_ADDRESS $CHANNEL_NAME config.json
fetchChannelConfig() {
  ORDERER_ADDRESS=$1
  ORDERER_CA=$2
  CHANNEL=$3
  OUTPUT=$4
  
  #setOrdererGlobals
  
  #echo "Fetching the most recent configuration block for the channel"
  peer channel fetch config config_block.pb -o $ORDERER_ADDRESS --tls --cafile $ORDERER_CA -c $CHANNEL 2> error.log || (cat error.log; exit 0)
  
  #echo "Decoding config block to JSON and isolating config to ${OUTPUT}"
  configtxlator proto_decode --input config_block.pb --type common.Block | jq .data.data[0].payload.data.config >"${OUTPUT}"
}


judgeMSPHashJoinChannel() { 
  grep -q "no differences detected between original and updated config" error.log; 
  if [[ $? -eq 0 ]]; then 
    echo "$MSP has already joined $CHANNEL" 
    exit 0 
  else
    cat error.log
    exit  1
  fi
}

# createConfigUpdate <channel_id> <original_config.json> <modified_config.json> <output.pb>
# Takes an original and modified config, and produces the config update tx
# which transitions between the two
# 输入: $CHANNEL_NAME config.json modified_config.json  update_envelope.pb
createConfigUpdate() {
  CHANNEL=$1
  ORIGINAL=$2
  MODIFIED=$3
  OUTPUT=$4
  MSP=$5

  configtxlator proto_encode --input "${ORIGINAL}" --type common.Config >original_config.pb
  configtxlator proto_encode --input "${MODIFIED}" --type common.Config >modified_config.pb
  configtxlator compute_update --channel_id "${CHANNEL}" --original original_config.pb --updated modified_config.pb >config_update.pb 2> error.log || judgeMSPHashJoinChannel
  configtxlator proto_decode --input config_update.pb --type common.ConfigUpdate >config_update.json
  echo '{"payload":{"header":{"channel_header":{"channel_id":"'$CHANNEL'", "type":2}},"data":{"config_update":'$(cat config_update.json)'}}}' | jq . >config_update_in_envelope.json
  configtxlator proto_encode --input config_update_in_envelope.json --type common.Envelope >"${OUTPUT}"
}


# signConfigtxAsPeerOrg <org> <configtx.pb>
# Set the peerOrg admin of an org and signing the config update
# 输入: 1 update_envelope.pb 
signConfigtxAsPeerOrg() {
  PEERORG=$1
  TX=$2
  setGlobals 0 $PEERORG
  peer channel signconfigtx -f "${TX}"
}



